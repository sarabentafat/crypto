import random

# AES Rcon
rcon = (
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
)

# S-box for AES encryption
sbox = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]

def rotate(word):
    """Rotate word byte-wise"""
    
    return word[1:] + word[:1]


def core(word, iteration):
    """Core key schedule"""
    word = list(word)  # Convert tuple to list
    word = rotate(word)
    for i in range(4):
        word[i] = sbox[word[i]]
    word[0] ^= rcon[iteration]
    return tuple(word)  # Convert back to tuple before returning

def key_expansion(key):
    """Key expansion"""
    expanded_key = [[] for _ in range(44)]  # Initialize expanded key as a list of empty lists
    for i in range(4):
        expanded_key[i] = [key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]]
    for i in range(4, 44):
        temp = expanded_key[i - 1][:]
        if i % 4 == 0:
            temp = core(temp, i // 4)
        for j in range(4):
            expanded_key[i].append(expanded_key[i - 4][j] ^ temp[j])
    return expanded_key

def sub_bytes(state):
    """Substitute bytes using AES S-box"""
    for i in range(4):
        for j in range(4):
            state[i][j] = sbox[state[i][j]]
    return state

def shift_rows(state):
    """Shift rows"""
    for i in range(1, 4):
        state[i] = state[i][i:] + state[i][:i]
    return state

def mix_columns(state):
    """Mix columns"""
    for i in range(4):
        s0 = state[0][i]
        s1 = state[1][i]
        s2 = state[2][i]
        s3 = state[3][i]
        state[0][i] = (0x02 * s0) ^ (0x03 * s1) ^ s2 ^ s3
        state[1][i] = s0 ^ (0x02 * s1) ^ (0x03 * s2) ^ s3
        state[2][i] = s0 ^ s1 ^ (0x02 * s2) ^ (0x03 * s3)
        state[3][i] = (0x03 * s0) ^ s1 ^ s2 ^ (0x02 * s3)
    return state

def add_round_key(state, round_key):
    """Add round key"""
    for i in range(4):
        for j in range(4):
            state[j][i] ^= round_key[i][j]
    return state

def aes_encrypt_block(block, key):
    """AES encryption for a single block"""
    round_keys = key_expansion(key)
    state = [[block[j + 4 * i] for j in range(4)] for i in range(4)]
    state = add_round_key(state, round_keys[:4])
    for i in range(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[4 * i : 4 * (i + 1)])
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[40:])
    return [state[j][i] for i in range(4) for j in range(4)]

def aes_encrypt(plaintext, key):
    """AES encryption"""
    if len(plaintext) != 16:
        raise ValueError("Plaintext length must be 16 bytes")
    if len(key) != 16:
        raise ValueError("Key length must be 16 bytes")
    ciphertext = []
    for i in range(0, len(plaintext), 16):
        block = aes_encrypt_block(plaintext[i:i + 16], key)
        ciphertext.extend(block)
    return bytes(ciphertext)

def pad_plaintext(plaintext):
    """Pad plaintext to 16 bytes"""
    padding_length = 16 - (len(plaintext) % 16)
    return plaintext + bytes([padding_length] * padding_length)

def main():
    text = input("Enter your plaintext: ").encode()
    padded_plaintext = pad_plaintext(text)
    print("Padded plaintext length:", len(padded_plaintext))

    key = bytes([random.randint(0, 255) for _ in range(16)])  # Generate a random key
    ciphertext = aes_encrypt(padded_plaintext, key)
    print("Cipher text:", ciphertext.hex())
   

if __name__ == "__main__":
    main()
